name: Binaries

defaults:
  run:
    shell: bash

on:
  pull_request:
  release:
    types: [created]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        ghc: ["8.8.4", "8.6.5"]
        os: [ubuntu-latest, macOS-latest, windows-latest]

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - uses: actions/setup-haskell@v1
        id: setup-haskell
        with:
          ghc-version: ${{ matrix.ghc }}

      - name: Peek
        run: find "${{ steps.setup-haskell.outputs.cabal-store }}"

      - name: Set some window specific things
        if: matrix.os == 'windows-latest'
        run: echo '::set-env name=EXE_EXT::.exe'

      - name: Configure project
        run: cabal configure --enable-tests --enable-benchmarks --write-ghc-environment-files=ghc8.4.4+

      - name: Restore cabal cache
        uses: haskell-works/cabal-cache-action@v1
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          BINARY_CACHE_REGION: ${{ secrets.BINARY_CACHE_REGION }}
          BINARY_CACHE_URI: ${{ secrets.BINARY_CACHE_URI }}
        with:
          args: |
            sync-from-archive \
              --threads       16 \
              --archive-uri   "$BINARY_CACHE_URI" \
              --region        "$BINARY_CACHE_REGION" \
              --store-path    "${{ steps.setup-haskell.outputs.cabal-store }}"

      - name: Peek
        run: find "${{ steps.setup-haskell.outputs.cabal-store }}"

      - name: Build
        # Try building it twice in case of flakey builds on Windows
        run: |
          cabal build all --enable-tests --enable-benchmarks --write-ghc-environment-files=ghc8.4.4+ || \
          cabal build all --enable-tests --enable-benchmarks --write-ghc-environment-files=ghc8.4.4+ -j1

      - name: Test
        # Try building it twice in case of flakey builds on Windows
        run: |
          cabal test all --enable-tests --enable-benchmarks --write-ghc-environment-files=ghc8.4.4+

      - name: Save cabal cache
        uses: haskell-works/cabal-cache-action@v1
        if: ${{ always() }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          BINARY_CACHE_REGION: ${{ secrets.BINARY_CACHE_REGION }}
          BINARY_CACHE_URI: ${{ secrets.BINARY_CACHE_URI }}
        with:
          args: |
            sync-to-archive \
              --threads       16 \
              --archive-uri   "$BINARY_CACHE_URI" \
              --region        "$BINARY_CACHE_REGION" \
              --store-path    "${{ steps.setup-haskell.outputs.cabal-store }}"

      - name: Compress Binary
        id: compress_binary
        env:
          GHC_VER: ${{ matrix.ghc }}
        run: |
          HS_BIN=$(find dist-newstyle \( -name 'cabal-cache' -o -name 'cabal-cache.exe' \) -type f | head -n 1)
          test -f "$HS_BIN"
          NAME=cabal-cache-$GHC_VER
          cp $HS_BIN $NAME${{env.EXE_EXT}}
          if [[ "$OSTYPE" == "msys" ]]; then
            7z a $NAME.zip $NAME${{env.EXE_EXT}}
            echo ::set-output name=path::$NAME.zip
            echo ::set-output name=content_type::application/zip
            echo ::set-output name=extension::zip
          else
            strip $NAME
            gzip --best $NAME
            echo ::set-output name=path::$NAME.gz
            echo ::set-output name=content_type::application/gzip
            echo ::set-output name=extension::gz
          fi

      - name: Upload Release Binary
        if: "github.event_name == 'release'"
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ${{ steps.compress_binary.outputs.path }}
          asset_name: cabal-cache-${{ runner.OS }}-${{ matrix.ghc }}${{env.EXE_EXT}}.${{ steps.compress_binary.outputs.extension }}
          asset_content_type: ${{ steps.compress_binary.outputs.content_type }}

      - uses: actions/upload-artifact@v2
        with:
          name: cabal-cache-${{ runner.OS }}-${{ matrix.ghc }}${{env.EXE_EXT}}.${{ steps.compress_binary.outputs.extension }}
          path: ${{ steps.compress_binary.outputs.path }}
